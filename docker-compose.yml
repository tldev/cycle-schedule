# ./docker-compose.yml

version: '3.8'

services:
  # Cache purge service - runs before main app
  cache-purge:
    image: curlimages/curl:latest
    container_name: cache_purge_container
    environment:
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID:-}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN:-}
    command: >
      sh -c '
      if [ -n "$${CLOUDFLARE_ZONE_ID}" ] && [ -n "$${CLOUDFLARE_API_TOKEN}" ]; then
        echo "Purging Cloudflare cache..." &&
        curl -X POST "https://api.cloudflare.com/client/v4/zones/$${CLOUDFLARE_ZONE_ID}/purge_cache" \
          -H "Authorization: Bearer $${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data "{\"purge_everything\":true}" &&
        echo "Cache purge complete"
      else
        echo "Skipping cache purge - Cloudflare credentials not set"
      fi
      '
    restart: "no"

  # This is your existing web application service
  cycleapp:
    build: .
    container_name: cycleapp_container
    restart: unless-stopped
    volumes:
      - ./src:/usr/share/nginx/html
      - ./src/schedule.json:/usr/share/nginx/html/schedule.json
    depends_on:
      - cache-purge

  # This is the new Cloudflare Tunnel service
  cloudflared-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_tunnel_container
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${TUNNEL_TOKEN}
    depends_on:
      - cycleapp

  # This is the new reminder service
  reminder:
    build:
      context: .
      dockerfile: reminder.Dockerfile
    container_name: reminder_container
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./src/schedule.json:/app/src/schedule.json
    command: ["python", "send_reminder.py"]

